// Generated by Apple Swift version 4.0 effective-3.2 (swiftlang-900.0.59 clang-900.0.34.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import AppKit;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
#endif

#import <SwiftNeoVim/SwiftNeoVim.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("SwiftNeoVim")




@class NeoVimBuffer;

@interface NeoVimTab (SWIFT_EXTENSION(SwiftNeoVim))
- (NSArray<NeoVimBuffer *> * _Nonnull)allBuffers SWIFT_WARN_UNUSED_RESULT;
@end

@class NSFont;
@class NSCoder;

SWIFT_CLASS("_TtC11SwiftNeoVim10NeoVimView")
@interface NeoVimView : NSView <NSTextInputClient, NSUserInterfaceValidations, NeoVimUiBridgeProtocol>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat minFontSize;)
+ (CGFloat)minFontSize SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat maxFontSize;)
+ (CGFloat)maxFontSize SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSFont * _Nonnull defaultFont;)
+ (NSFont * _Nonnull)defaultFont SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat defaultLinespacing;)
+ (CGFloat)defaultLinespacing SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat minLinespacing;)
+ (CGFloat)minLinespacing SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat maxLinespacing;)
+ (CGFloat)maxLinespacing SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull uuid;
@property (nonatomic, readonly) CursorModeShape mode;
@property (nonatomic) BOOL usesLigatures;
@property (nonatomic) CGFloat linespacing;
@property (nonatomic, strong) NSFont * _Nonnull font;
@property (nonatomic, copy) NSURL * _Nonnull cwd;
@property (nonatomic, readonly) BOOL acceptsFirstResponder;
@property (nonatomic, readonly) Position currentPosition;
- (nonnull instancetype)initWithFrame:(NSRect)rect;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (IBAction)debug1:(id _Nullable)sender;
@end

@protocol NSValidatedUserInterfaceItem;

@interface NeoVimView (SWIFT_EXTENSION(SwiftNeoVim))
- (BOOL)validateUserInterfaceItem:(id <NSValidatedUserInterfaceItem> _Nonnull)item SWIFT_WARN_UNUSED_RESULT;
@end

@protocol NSDraggingInfo;

@interface NeoVimView (SWIFT_EXTENSION(SwiftNeoVim))
- (NSDragOperation)draggingEntered:(id <NSDraggingInfo> _Nonnull)sender SWIFT_WARN_UNUSED_RESULT;
- (NSDragOperation)draggingUpdated:(id <NSDraggingInfo> _Nonnull)sender SWIFT_WARN_UNUSED_RESULT;
- (BOOL)performDragOperation:(id <NSDraggingInfo> _Nonnull)sender SWIFT_WARN_UNUSED_RESULT;
@end








@interface NeoVimView (SWIFT_EXTENSION(SwiftNeoVim))
- (void)setFrameSize:(NSSize)newSize;
- (void)viewDidEndLiveResize;
@end


@interface NeoVimView (SWIFT_EXTENSION(SwiftNeoVim))
- (IBAction)selectAll:(id _Nullable)sender;
@end

@class NSEvent;

@interface NeoVimView (SWIFT_EXTENSION(SwiftNeoVim))
- (void)mouseDown:(NSEvent * _Nonnull)event;
- (void)mouseUp:(NSEvent * _Nonnull)event;
- (void)mouseDragged:(NSEvent * _Nonnull)event;
- (void)scrollWheel:(NSEvent * _Nonnull)event;
- (void)magnifyWithEvent:(NSEvent * _Nonnull)event;
@end

@class NSNumber;

@interface NeoVimView (SWIFT_EXTENSION(SwiftNeoVim))
- (void)bell;
- (void)cwdChanged:(NSString * _Nonnull)cwd;
- (void)colorSchemeChanged:(NSArray<NSNumber *> * _Nonnull)values;
- (void)setDirtyStatus:(BOOL)dirty;
- (void)updateMenu;
- (void)busyStart;
- (void)busyStop;
- (void)mouseOn;
- (void)mouseOff;
- (void)visualBell;
- (void)suspend;
- (void)setIcon:(NSString * _Nonnull)icon;
@end

@class NSAttributedString;

@interface NeoVimView (SWIFT_EXTENSION(SwiftNeoVim))
- (void)keyDown:(NSEvent * _Nonnull)event;
- (void)insertText:(id _Nonnull)aString replacementRange:(NSRange)replacementRange;
- (void)doCommandBySelector:(SEL _Nonnull)aSelector;
- (BOOL)performKeyEquivalent:(NSEvent * _Nonnull)event SWIFT_WARN_UNUSED_RESULT;
- (void)setMarkedText:(id _Nonnull)aString selectedRange:(NSRange)selectedRange replacementRange:(NSRange)replacementRange;
- (void)unmarkText;
/// Return the current selection (or the position of the cursor with empty-length range).
/// For example when you enter “Cmd-Ctrl-Return” you’ll get the Emoji-popup at the rect
/// by firstRectForCharacterRange(actualRange:) where the first range is the result of this method
- (NSRange)selectedRange SWIFT_WARN_UNUSED_RESULT;
- (NSRange)markedRange SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasMarkedText SWIFT_WARN_UNUSED_RESULT;
- (NSAttributedString * _Nullable)attributedSubstringForProposedRange:(NSRange)aRange actualRange:(NSRangePointer _Nullable)actualRange SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)validAttributesForMarkedText SWIFT_WARN_UNUSED_RESULT;
- (NSRect)firstRectForCharacterRange:(NSRange)aRange actualRange:(NSRangePointer _Nullable)actualRange SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)characterIndexForPoint:(NSPoint)aPoint SWIFT_WARN_UNUSED_RESULT;
@end


@interface NeoVimView (SWIFT_EXTENSION(SwiftNeoVim))
- (void)viewDidMoveToWindow;
- (void)drawRect:(NSRect)dirtyUnionRect;
@end


@interface NeoVimView (SWIFT_EXTENSION(SwiftNeoVim))
- (void)resizeToWidth:(NSInteger)width height:(NSInteger)height;
- (void)clear;
- (void)eolClear;
- (void)gotoPosition:(Position)position textPosition:(Position)textPosition;
- (void)modeChange:(CursorModeShape)mode;
- (void)setScrollRegionToTop:(NSInteger)top bottom:(NSInteger)bottom left:(NSInteger)left right:(NSInteger)right;
- (void)scroll:(NSInteger)count;
- (void)highlightSet:(CellAttributes)attrs;
- (void)put:(NSString * _Nonnull)string;
- (void)putMarkedText:(NSString * _Nonnull)markedText;
- (void)unmarkRow:(NSInteger)row column:(NSInteger)column;
- (void)flush;
- (void)updateForeground:(NSInteger)fg;
- (void)updateBackground:(NSInteger)bg;
- (void)updateSpecial:(NSInteger)sp;
- (void)setTitle:(NSString * _Nonnull)title;
- (void)stop;
- (void)autoCommandEvent:(NeoVimAutoCommandEvent)event bufferHandle:(NSInteger)bufferHandle;
- (void)ipcBecameInvalid:(NSString * _Nonnull)reason;
@end


@interface NeoVimView (SWIFT_EXTENSION(SwiftNeoVim))
- (void)enterResizeMode;
- (void)exitResizeMode;
///
/// returns:
/// nil when for exampls a quickfix panel is open.
- (NeoVimBuffer * _Nullable)currentBuffer SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NeoVimBuffer *> * _Nonnull)allBuffers SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasDirtyDocs SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isCurrentBufferDirty SWIFT_WARN_UNUSED_RESULT;
- (void)newTab;
- (void)openWithUrls:(NSArray<NSURL *> * _Nonnull)urls;
- (void)openInNewTabWithUrls:(NSArray<NSURL *> * _Nonnull)urls;
- (void)openInCurrentTabWithUrl:(NSURL * _Nonnull)url;
- (void)openInHorizontalSplitWithUrls:(NSArray<NSURL *> * _Nonnull)urls;
- (void)openInVerticalSplitWithUrls:(NSArray<NSURL *> * _Nonnull)urls;
- (void)selectWithBuffer:(NeoVimBuffer * _Nonnull)buffer;
- (void)closeCurrentTab;
- (void)saveCurrentTab;
- (void)saveCurrentTabWithUrl:(NSURL * _Nonnull)url;
- (void)closeCurrentTabWithoutSaving;
- (void)closeAllWindows;
- (void)quitNeoVimWithoutSaving;
- (NSString * _Nonnull)vimOutputOf:(NSString * _Nonnull)command SWIFT_WARN_UNUSED_RESULT;
- (void)cursorGoTo:(Position)position;
@end

SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
